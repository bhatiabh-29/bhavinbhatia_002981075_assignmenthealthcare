/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JPanel.java to edit this template
 */
package ui;

import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import model.location.House;
import model.location.Residence;
import model.patient.PatientGenerator;
import model.person.Person;
import model.person.PersonDirectory;

/**
 *
 * @author bhavinbhatia
 */
public class CreateNewPerson extends javax.swing.JPanel {

    /**
     * Creates new form CreateNewPerson
     */
    Person person;
    CreateNewPatient newPatient;
    PersonDirectory personDirectory;
    public CreateNewPerson(PersonDirectory personDirectory) {
        initComponents();
        this.person = person;
        this.personDirectory = personDirectory;
        displayPerson();
       
    }

   
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        createPersonPane = new javax.swing.JPanel();
        lblPatientName = new javax.swing.JLabel();
        lblPatientAge = new javax.swing.JLabel();
        lblPatientGender = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        txtAge = new javax.swing.JTextField();
        txtGender = new javax.swing.JTextField();
        btnCreatePerson = new javax.swing.JButton();
        lblCity = new javax.swing.JLabel();
        txtCity = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblPatientRecords = new javax.swing.JTable();
        titlePanel = new javax.swing.JPanel();
        btnUpdate = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        btnSelect = new javax.swing.JButton();
        lblCommunity = new javax.swing.JLabel();
        lblHouse = new javax.swing.JLabel();
        txtCommunity = new javax.swing.JTextField();
        txtHouse = new javax.swing.JTextField();

        createPersonPane.setBackground(new java.awt.Color(0, 153, 153));
        createPersonPane.setPreferredSize(new java.awt.Dimension(600, 600));

        lblPatientName.setText("Patient Name:");

        lblPatientAge.setText("Patient Age:");

        lblPatientGender.setText("Gender:");

        txtGender.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtGenderActionPerformed(evt);
            }
        });

        btnCreatePerson.setText("Create");
        btnCreatePerson.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreatePersonActionPerformed(evt);
            }
        });

        lblCity.setText("City:");

        tblPatientRecords.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 2, true));
        tblPatientRecords.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Name", "Age", "Gender", "City", "Community", "House"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblPatientRecords);

        titlePanel.setBackground(new java.awt.Color(0, 204, 204));

        javax.swing.GroupLayout titlePanelLayout = new javax.swing.GroupLayout(titlePanel);
        titlePanel.setLayout(titlePanelLayout);
        titlePanelLayout.setHorizontalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        titlePanelLayout.setVerticalGroup(
            titlePanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 73, Short.MAX_VALUE)
        );

        btnUpdate.setText("Update");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        btnDelete.setText("Delete");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnSelect.setText("Select");
        btnSelect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectActionPerformed(evt);
            }
        });

        lblCommunity.setText("Community");

        lblHouse.setText("House");

        javax.swing.GroupLayout createPersonPaneLayout = new javax.swing.GroupLayout(createPersonPane);
        createPersonPane.setLayout(createPersonPaneLayout);
        createPersonPaneLayout.setHorizontalGroup(
            createPersonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(titlePanel, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(createPersonPaneLayout.createSequentialGroup()
                .addGroup(createPersonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(createPersonPaneLayout.createSequentialGroup()
                        .addGap(313, 313, 313)
                        .addComponent(btnSelect)
                        .addGap(70, 70, 70)
                        .addComponent(btnDelete))
                    .addGroup(createPersonPaneLayout.createSequentialGroup()
                        .addGap(240, 240, 240)
                        .addGroup(createPersonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, createPersonPaneLayout.createSequentialGroup()
                                .addGroup(createPersonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(lblCity, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblPatientGender, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblPatientAge, javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(lblPatientName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(createPersonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, 183, javax.swing.GroupLayout.PREFERRED_SIZE)))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, createPersonPaneLayout.createSequentialGroup()
                                .addComponent(btnCreatePerson, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnUpdate))
                            .addComponent(lblHouse, javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, createPersonPaneLayout.createSequentialGroup()
                                .addComponent(lblCommunity)
                                .addGap(54, 54, 54)
                                .addGroup(createPersonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtCommunity)
                                    .addComponent(txtHouse))))))
                .addContainerGap(163, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, createPersonPaneLayout.createSequentialGroup()
                .addGap(0, 86, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 673, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(92, Short.MAX_VALUE))
        );

        createPersonPaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {txtAge, txtCity, txtGender, txtName});

        createPersonPaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {lblCity, lblPatientAge, lblPatientGender, lblPatientName});

        createPersonPaneLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCreatePerson, btnDelete, btnSelect, btnUpdate});

        createPersonPaneLayout.setVerticalGroup(
            createPersonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(createPersonPaneLayout.createSequentialGroup()
                .addComponent(titlePanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 142, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(createPersonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnDelete)
                    .addComponent(btnSelect))
                .addGap(18, 18, 18)
                .addGroup(createPersonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtName)
                    .addComponent(lblPatientName, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(createPersonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblPatientAge)
                    .addComponent(txtAge, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(16, 16, 16)
                .addGroup(createPersonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtGender, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblPatientGender))
                .addGap(10, 10, 10)
                .addGroup(createPersonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCity, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblCity))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(createPersonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, createPersonPaneLayout.createSequentialGroup()
                        .addComponent(lblCommunity)
                        .addGap(22, 22, 22))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, createPersonPaneLayout.createSequentialGroup()
                        .addComponent(txtCommunity, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)))
                .addGroup(createPersonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(lblHouse)
                    .addComponent(txtHouse, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(createPersonPaneLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnCreatePerson, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdate))
                .addGap(19, 19, 19))
        );

        createPersonPaneLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {txtAge, txtCity, txtGender, txtName});

        createPersonPaneLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {lblCity, lblPatientAge, lblPatientGender, lblPatientName});

        createPersonPaneLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {btnCreatePerson, btnDelete, btnSelect, btnUpdate});

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(createPersonPane, javax.swing.GroupLayout.DEFAULT_SIZE, 851, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(createPersonPane, javax.swing.GroupLayout.PREFERRED_SIZE, 627, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 6, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    public Boolean validatePersonProfileAndDisplayError(){
        
        return false;
        
    };
    
    
    
    
    
    private void btnCreatePersonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreatePersonActionPerformed
        // TODO add your handling code here:
        String name = txtName.getText();
        String ageStr =   txtAge.getText();

        String gender = txtGender.getText();
        String cityName = txtCity.getText();
        String communityName = txtCommunity.getText();
        String houseNumber = txtHouse.getText();
        
        if (!validateNotNull(
                name, ageStr, gender, cityName, communityName,
                houseNumber
        )) {
            return;
        }
        int age =   Integer.valueOf(ageStr);

        
        Residence residence = PatientGenerator.getResidence(cityName, 
                communityName);
        House newHouse = null;
        for (House house : residence.getCommunity().getHouses()) {
            if (house.getHouseNumber() == Integer.valueOf(houseNumber)){
                newHouse = house; 
            }
        }
        if (newHouse == null){
             newHouse = new House(Integer.valueOf(houseNumber));
        }
        
        residence.setHouse(newHouse);
        
        this.person = new Person(name, gender, age, residence);

       this.personDirectory.addPerson(person);

        JOptionPane.showMessageDialog(this, "New  Record Added");
        txtName.setText("");
        txtCity.setText("");
        txtAge.setText("");
        txtCommunity.setText("");
        txtGender.setText("");
        txtHouse.setText("");


    }//GEN-LAST:event_btnCreatePersonActionPerformed

    private void txtGenderActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtGenderActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtGenderActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblPatientRecords.getSelectedRow();
        if (selectedRowIndex < 0){
            JOptionPane.showMessageDialog(this, "Please select the row to delete");
            return;
        }
        DefaultTableModel personModel = (DefaultTableModel) tblPatientRecords.getModel();
        this.personDirectory.deletePerson(selectedRowIndex);
        
        JOptionPane.showMessageDialog(this, "Record Deleted");
        displayPerson();
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnSelectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectActionPerformed
        // TODO add your handling code here:
        int selectedRowIndex = tblPatientRecords.getSelectedRow();
        if(selectedRowIndex < 0){
            JOptionPane.showMessageDialog( this, "Please select the row first");
        } 
      DefaultTableModel personModel = (DefaultTableModel) tblPatientRecords.getModel();
        this.person = (Person) personModel.getValueAt(selectedRowIndex, 0);

        txtName.setText(person.getName());
        txtAge.setText(String.valueOf(person.getAge()));
        txtGender.setText(person.getGender());
        txtCity.setText(person.getResidence().getCity().getCityName());
        txtCommunity.setText(person.getResidence().getCommunity().getCommunityName());
        txtHouse.setText(String.valueOf(person.getResidence().getHouse().getHouseNumber()));
       
    }//GEN-LAST:event_btnSelectActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        // TODO add your handling code here:
        String name = txtName.getText();
        String ageStr =   txtAge.getText();

        String gender = txtGender.getText();
        String cityName = txtCity.getText();
        String communityName = txtCommunity.getText();
        String houseNumber = txtHouse.getText();
        
        if (!validateNotNull(
                name, ageStr, gender, cityName, communityName,
                houseNumber
        )) {
            return;
        }
        int age =   Integer.valueOf(ageStr);

        
        Residence residence = PatientGenerator.getResidence(cityName, 
                communityName);
        House newHouse = null;
        for (House house : residence.getCommunity().getHouses()) {
            if (house.getHouseNumber() == Integer.valueOf(houseNumber)){
                newHouse = house; 
            }
        }
        if (newHouse == null){
             newHouse = new House(Integer.valueOf(houseNumber));
        }
        
        residence.setHouse(newHouse);
        
        this.person.setName(name); 
        this.person.setAge(age); 
        this.person.setGender(gender); 
        this.person.setResidence(residence);

        

        JOptionPane.showMessageDialog(this, "Record updated.");
        txtName.setText("");
        txtCity.setText("");
        txtAge.setText("");
        txtCommunity.setText("");
        txtGender.setText("");
        txtHouse.setText("");
        displayPerson();
    }//GEN-LAST:event_btnUpdateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCreatePerson;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnSelect;
    private javax.swing.JButton btnUpdate;
    private javax.swing.JPanel createPersonPane;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblCity;
    private javax.swing.JLabel lblCommunity;
    private javax.swing.JLabel lblHouse;
    private javax.swing.JLabel lblPatientAge;
    private javax.swing.JLabel lblPatientGender;
    private javax.swing.JLabel lblPatientName;
    private javax.swing.JTable tblPatientRecords;
    private javax.swing.JPanel titlePanel;
    private javax.swing.JTextField txtAge;
    private javax.swing.JTextField txtCity;
    private javax.swing.JTextField txtCommunity;
    private javax.swing.JTextField txtGender;
    private javax.swing.JTextField txtHouse;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables
public void displayPerson(){

        DefaultTableModel model = (DefaultTableModel) tblPatientRecords.getModel();
        model.setRowCount(0);
        
        for (Person person : this.personDirectory.getPersons()){
            Object [] row = new Object[6];
            row[0]= person;
            row[1]= person.getAge();
            row[2]= person.getGender();
            row[3] = person.getResidence().getCity().getCityName();
            row[4] = person.getResidence().getCommunity().getCommunityName();
            row[5] = person.getResidence().getHouse().getHouseNumber();
            
            
            model.addRow(row);
            
        
        }

        
}


 public boolean validateNotNull(String... input){
      for (String inp : input) {
          if(inp.isEmpty()){
              JOptionPane.showMessageDialog(this, "All fields are required.");
              return false;
          }
            
      }
      return true;
     }
}

